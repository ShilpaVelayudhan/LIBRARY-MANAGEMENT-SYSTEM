set FLASK_APP=app


from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///library.db'
db = SQLAlchemy(app)

class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    author = db.Column(db.String(50), nullable=False)
    genre = db.Column(db.String(50), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    issued = db.Column(db.Integer, default=0)
    issued_to = db.Column(db.String(100), default="")
    issue_date = db.Column(db.Date, default=None)
    return_date = db.Column(db.Date, default=None)

    def __repr__(self):
        return f"Book('{self.title}', '{self.author}', '{self.genre}', '{self.quantity}')"

@app.route('/')
def home():
    books = Book.query.all()
    return render_template('home.html', books=books)

@app.route('/add', methods=['GET', 'POST'])
def add_book():
    if request.method == 'POST':
        title = request.form['title']
        author = request.form['author']
        genre = request.form['genre']
        quantity = request.form['quantity']
        new_book = Book(title=title, author=author, genre=genre, quantity=quantity)
        db.session.add(new_book)
        db.session.commit()
        return redirect(url_for('home'))
    else:
        return render_template('add_book.html')

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit_book(id):
    book = Book.query.get_or_404(id)
    if request.method == 'POST':
        book.title = request.form['title']
        book.author = request.form['author']
        book.genre = request.form['genre']
        book.quantity = request.form['quantity']
        db.session.commit()
        return redirect(url_for('home'))
    else:
        return render_template('edit_book.html', book=book)

@app.route('/delete/<int:id>')
def delete_book(id):
    book = Book.query.get_or_404(id)
    db.session.delete(book)
    db.session.commit()
    return redirect(url_for('home'))

@app.route('/issue/<int:id>', methods=['GET', 'POST'])
def issue_book(id):
    book = Book.query.get_or_404(id)
    if request.method == 'POST':
        book.issued += int(request.form['issued'])
        book.quantity -= int(request.form['issued'])
        book.issued_to = request.form['issued_to']
        book.issue_date = request.form['issue_date']
        book.return_date = request.form['return_date']
        db.session.commit()
        return redirect(url_for('home'))
    else:
        return render_template('issue_book.html', book=book)

@app.route('/return/<int:id>', methods=['GET', 'POST'])
def return_book(id):
    book = Book.query.get_or_404(id)
    if request.method == 'POST':
        book.issued -= int(request.form['returned'])
        book.quantity += int(request.form['returned'])
        book.issued_to = ""
        book.issue_date = None
        book.return_date = None
        db.session.commit()
        return redirect(url_for('home'))
    else:
        return render_template('return_book.html', book=book)

if __name__ == '__main__':
    app.run(debug=True)
